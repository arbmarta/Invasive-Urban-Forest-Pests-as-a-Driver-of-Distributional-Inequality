import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv(r'C:\Users\alexj\Documents\MSc Research\MSc Manuscripts\Drivers of Inequality\Python Scripts and Datasets\(1) Filtered Master Dataset.csv', low_memory=False)

# Indices
variable_columns = ['Tree Count', 'Basal Area Sum', 'DED Sus Tree Count', 'DED Sus Basal Area',
                   'DED Tree Count', 'DED Basal Area', 'EAB Tree Count', 'EAB Basal Area']
tree_count_columns = ['Tree Count', 'DED Sus Tree Count', 'DED Tree Count', 'EAB Tree Count']
basal_area_columns = ['Basal Area Sum', 'DED Sus Basal Area', 'DED Basal Area', 'EAB Basal Area']
cities = ["Calgary", "Edmonton", "Lethbridge", "Regina", "Winnipeg"]

# Aggregate information
tree_count = df['CTUID'].value_counts()
basal_area = df.groupby('CTUID')['Basal Area'].sum()

DED_Sus_tree_count = df[df['DED Susceptible'] == 0]['CTUID'].value_counts()
DED_Sus_basal_area = df[df['DED Susceptible'] == 0].groupby('CTUID')['Basal Area'].sum()

DED_tree_count = df[df['All Elm - Susceptible'] == 0]['CTUID'].value_counts()
DED_basal_area = df[df['All Elm - Susceptible'] == 0].groupby('CTUID')['Basal Area'].sum()

EAB_tree_count = df[df['EAB Susceptible'] == 0]['CTUID'].value_counts()
EAB_basal_area = df[df['EAB Susceptible'] == 0].groupby('CTUID')['Basal Area'].sum()

# Aggregate the two series
aggregate_df = pd.DataFrame({
    'Tree Count': tree_count,
    'Basal Area Sum': basal_area,
    'DED Sus Tree Count': DED_Sus_tree_count,
    'DED Sus Basal Area': DED_Sus_basal_area,
    'DED Tree Count': DED_tree_count,
    'DED Basal Area': DED_basal_area,
    'EAB Tree Count': EAB_tree_count,
    'EAB Basal Area': EAB_basal_area
}).fillna(0)

aggregate_df = aggregate_df.reset_index()

# Remove extra columns
aggregate_df = aggregate_df[['CTUID', 'Tree Count', 'Basal Area Sum', 'DED Sus Tree Count','DED Sus Basal Area',
                      'DED Tree Count', 'DED Basal Area', 'EAB Tree Count','EAB Basal Area']]

# Add population counts
CTUID_df = pd.read_excel(r'C:\Users\alexj\Documents\MSc Research\MSc Manuscripts\Drivers of Inequality\Census Statistics\Census Tracts.xlsx')
final_df = CTUID_df.merge(aggregate_df, how='outer', on='CTUID')
print(final_df.columns)
print(len(final_df))
final_df[variable_columns] = final_df[variable_columns].fillna(0)

# ----------------- Plot Lorenz Curves -----------------
# Function to plot Lorenz curves for multiple columns on the same plot with custom legend labels
def plot_multiple_lorenz_curves(data, columns, city, plot_type):
    plt.figure(figsize=(8, 8))

    # Dictionary to map columns to custom legend titles (modify as needed)
    custom_legend_titles = {
        'Tree Count': 'Current Inequality',
        'DED Sus Tree Count': 'Following Loss of Susceptible Elm',
        'DED Tree Count': 'Following Loss of All Elm',
        'EAB Tree Count': 'Following Loss of Ash',
        'Basal Area Sum': 'Current Inequality',
        'DED Sus Basal Area': 'Following Loss of Susceptible Elm',
        'DED Basal Area': 'Following Loss of All Elm',
        'EAB Basal Area': 'Following Loss of Ash'
    }

    for column in columns:
        if data[column].sum() > 0:  # Avoid plotting columns with no data
            data_sorted = data.sort_values(by=column)
            cumulative_sum = np.cumsum(data_sorted[column])
            cumulative_percent = (cumulative_sum / cumulative_sum.max()) * 100  # Convert to percentage
            n = len(cumulative_sum)
            lorenz_curve = (np.cumsum(np.ones(n) / n)) * 100  # Convert to percentage

            # Plot with custom legend title
            plt.plot(np.linspace(0.0, 100.0, n), cumulative_percent,
                     label=custom_legend_titles.get(column, column))  # Use custom title or default to column name

    # Add equality line without adding it to the legend
    plt.plot([0, 100], [0, 100], linestyle='--', color='black', label="_nolegend_")

    # Add text label for the equality line
    plt.text(41, 44, 'Line of Perfect Equality', rotation=45, fontsize=10, color='black')

    plt.xlabel("Cumulative Percentage of Population")  # x-axis label as percentage
    plt.ylabel(f"Cumulative Percentage of {plot_type}")  # y-axis label as percentage
    plt.legend(loc="upper left")
    plt.title(f'Lorenz Curve for {city} - {plot_type}')
    plt.grid(False)
    plt.show()


# Loop through each city
for city in cities:
    city_df = final_df[final_df['City'] == city]

    # Plot all tree count columns on the same plot
    plot_multiple_lorenz_curves(city_df, tree_count_columns, city, "Tree Counts")

    # Plot all basal area columns on the same plot
    plot_multiple_lorenz_curves(city_df, basal_area_columns, city, "Basal Areas")
