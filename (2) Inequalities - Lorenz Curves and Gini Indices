import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv(r'C:\Users\alexj\Documents\MSc Research\MSc Manuscripts\Drivers of Inequality\Python Scripts and Datasets\(1) Filtered Master Dataset.csv', low_memory=False)

# Indices
variable_columns = ['Tree Count', 'Basal Area Sum', 'DED Sus Tree Count', 'DED Sus Basal Area',
                   'DED Tree Count', 'DED Basal Area', 'EAB Tree Count', 'EAB Basal Area']
tree_count_columns = ['Tree Count', 'DED Sus Tree Count', 'DED Tree Count', 'EAB Tree Count']
basal_area_columns = ['Basal Area Sum', 'DED Sus Basal Area', 'DED Basal Area', 'EAB Basal Area']
cities = ["Calgary", "Edmonton", "Lethbridge", "Regina", "Winnipeg"]

# Aggregate information
tree_count = df['CTUID'].value_counts()
basal_area = df.groupby('CTUID')['Basal Area'].sum()

DED_Sus_tree_count = df[df['DED Susceptible'] == 0]['CTUID'].value_counts()
DED_Sus_basal_area = df[df['DED Susceptible'] == 0].groupby('CTUID')['Basal Area'].sum()

DED_tree_count = df[df['All Elm - Susceptible'] == 0]['CTUID'].value_counts()
DED_basal_area = df[df['All Elm - Susceptible'] == 0].groupby('CTUID')['Basal Area'].sum()

EAB_tree_count = df[df['EAB Susceptible'] == 0]['CTUID'].value_counts()
EAB_basal_area = df[df['EAB Susceptible'] == 0].groupby('CTUID')['Basal Area'].sum()

# Aggregate the two series
aggregate_df = pd.DataFrame({
    'Tree Count': tree_count,
    'Basal Area Sum': basal_area,
    'DED Sus Tree Count': DED_Sus_tree_count,
    'DED Sus Basal Area': DED_Sus_basal_area,
    'DED Tree Count': DED_tree_count,
    'DED Basal Area': DED_basal_area,
    'EAB Tree Count': EAB_tree_count,
    'EAB Basal Area': EAB_basal_area
}).fillna(0)

aggregate_df = aggregate_df.reset_index()

# Remove extra columns
aggregate_df = aggregate_df[['CTUID', 'Tree Count', 'Basal Area Sum', 'DED Sus Tree Count','DED Sus Basal Area',
                      'DED Tree Count', 'DED Basal Area', 'EAB Tree Count','EAB Basal Area']]

# Population counts
CTUID_df = pd.read_excel(r'C:\Users\alexj\Documents\MSc Research\MSc Manuscripts\Drivers of Inequality\Census Statistics\Census Tracts.xlsx')

Winnipeg_total_population = 749607
Regina_total_population = 226404
Lethbridge_total_population = 98406
Calgary_total_population = 1306784
Edmonton_total_population =	1010899

final_df = CTUID_df.merge(aggregate_df, how='outer', on='CTUID')

print(final_df.columns)
print(len(final_df))

# Fill NaN values with 0 for the specified columns
final_df[variable_columns] = final_df[variable_columns].fillna(0)

# Dictionary to map columns to custom legend titles
custom_legend_titles = {
    'Tree Count': 'Current Inequality',
    'DED Sus Tree Count': 'Following Loss of Susceptible Elm',
    'DED Tree Count': 'Following Loss of All Elm',
    'EAB Tree Count': 'Following Loss of Ash',
    'Basal Area Sum': 'Current Inequality',
    'DED Sus Basal Area': 'Following Loss of Susceptible Elm',
    'DED Basal Area': 'Following Loss of All Elm',
    'EAB Basal Area': 'Following Loss of Ash'
}

# Function to calculate the Gini Index
def calculate_gini(cumulative_population, cumulative_share):
    # Add 0 at the beginning for the Lorenz curve
    cumulative_population = np.insert(cumulative_population, 0, 0)
    cumulative_share = np.insert(cumulative_share, 0, 0)

    # Calculate the Gini Index using the trapezoidal rule
    B = np.trapezoid(cumulative_share, cumulative_population)
    Gini = 1 - 2 * B
    return Gini

# CREATE LORENZ CURVES AND CALCULATE GINI INDEX
# Loop through each city and generate Lorenz curves and Gini Index
for city in cities:
    # Filter the data for the current city
    city_df = final_df[final_df['City'] == city]

    if city_df.empty:
        print(f"No data available for {city}")
        continue

    # Calculate the total population for normalization
    total_population = city_df['Population'].sum()

    # ===================== Plot for Tree Count Columns =====================
    plt.figure(figsize=(10, 6))

    for column in tree_count_columns:
        # Sort the data by the current column in ascending order
        sorted_df = city_df.sort_values(by=column)

        # Treat each person as a point
        sorted_df['Population Share'] = sorted_df['Population'] / total_population

        # Cumulative sum for the current column and cumulative population share
        cumulative_column = sorted_df[column].cumsum()
        cumulative_population_share = sorted_df['Population Share'].cumsum()

        # Normalize the cumulative sums to get values between 0 and 100
        cumulative_column_normalized = cumulative_column / cumulative_column.iloc[-1] * 100
        cumulative_population_normalized = cumulative_population_share * 100

        # Calculate the Gini Index
        gini_index = calculate_gini(cumulative_population_normalized / 100, cumulative_column_normalized / 100)
        print(f'Gini Index for {city} - {custom_legend_titles.get(column, column)}: {gini_index:.4f}')

        # Plot Lorenz Curve for the current column using custom legend titles
        plt.plot(cumulative_population_normalized, cumulative_column_normalized,
                 label=f'Lorenz Curve ({custom_legend_titles.get(column, column)})')

    # Plot the equality line (diagonal)
    plt.plot([0, 100], [0, 100], linestyle='--', color='black', label='Equality Line')

    # Labels and title
    plt.xlabel('Cumulative Population (%)')
    plt.ylabel('Cumulative Share of Trees (%)')
    plt.title(f'Lorenz Curves for Tree Counts in {city}')
    plt.legend()

    # Show the plot for Tree Count columns
    plt.show()

    # ===================== Plot for Basal Area Columns =====================
    plt.figure(figsize=(10, 6))

    for column in basal_area_columns:
        # Sort the data by the current column in ascending order
        sorted_df = city_df.sort_values(by=column)

        # Treat each person as a point
        sorted_df['Population Share'] = sorted_df['Population'] / total_population

        # Cumulative sum for the current column and cumulative population share
        cumulative_column = sorted_df[column].cumsum()
        cumulative_population_share = sorted_df['Population Share'].cumsum()

        # Normalize the cumulative sums to get values between 0 and 100
        cumulative_column_normalized = cumulative_column / cumulative_column.iloc[-1] * 100
        cumulative_population_normalized = cumulative_population_share * 100

        # Calculate the Gini Index
        gini_index = calculate_gini(cumulative_population_normalized / 100, cumulative_column_normalized / 100)
        print(f'Gini Index for {city} - {custom_legend_titles.get(column, column)}: {gini_index:.4f}')

        # Plot Lorenz Curve for the current column using custom legend titles
        plt.plot(cumulative_population_normalized, cumulative_column_normalized,
                 label=f'Lorenz Curve ({custom_legend_titles.get(column, column)})')

    # Plot the equality line (diagonal)
    plt.plot([0, 100], [0, 100], linestyle='--', color='black', label='Equality Line')

    # Labels and title
    plt.xlabel('Cumulative Population (%)')
    plt.ylabel('Cumulative Share of Basal Area (%)')
    plt.title(f'Lorenz Curves for Basal Area in {city}')
    plt.legend()

    # Show the plot for Basal Area columns
    plt.show()
